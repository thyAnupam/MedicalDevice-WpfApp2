using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows.Input;
using WpfApp2.Repository;
using WpfApp2.Repository.Models;
using WpfApp2.ViewModels.Services;
using WpfApp2.Views;

namespace WpfApp2.ViewModels
{
    internal class SearchPatientViewModel:ViewModelBase
    {
        private readonly MoDbContext context;

        private string _searchquery;
        public string SearchQuery
        {
            get => _searchquery;
            set
            {
                _searchquery = value;
                OnPropertyChanged(nameof(SearchQuery));
                SearchText();


            }
        }

        private string _selectedparam;
        public string SelectedParam
        {
            get => _selectedparam;
            set
            {
                SetProperty(ref _selectedparam, value);
                
            }
        }
        private ObservableCollection<PatientViewModel> _patients;
        public ObservableCollection<PatientViewModel> Patients
        {
            get => _patients;
            set
            {
                _patients = value;
                OnPropertyChanged(nameof(Patients));
            }
        }

        private INavigationService _navigationService;
        public SearchPatientViewModel(INavigationService navigationService) 
        {
            context = new MoDbContext();
            _navigationService = navigationService;
        }

        

        private void SearchText()
        {
            string s = SearchQuery.ToLower();

            

            if(SelectedParam == "First Name")
            {
                var list = context.Patients.Where(x => x.Firstname.ToLower().StartsWith(s)).Select(x => new PatientViewModel(x, _navigationService));
                Patients = new ObservableCollection<PatientViewModel>(list);

            }
            else
            {
                var list = context.Patients.Where(x => x.Lastname.ToLower().StartsWith(s)).Select(x => new PatientViewModel(x, _navigationService));
                Patients = new ObservableCollection<PatientViewModel>(list);

            }

        }

    }


    public class PatientViewModel : INotifyPropertyChanged
    {

        private Patient patient;
        
        public int PatientID => patient.PatientId;
        public string Firstname => patient.Firstname;
        public string Lastname => patient.Lastname;
        // Other properties from the autogenerated Patient class
        private INavigationService _navigationService;
        public ICommand GoToStudyCommand { get; }

        public PatientViewModel(Patient patient, INavigationService n)
        {
            this.patient = patient;
            GoToStudyCommand = new RelayCommand(GoToStudy);
            _navigationService = n;
        }

        private void GoToStudy()
        {
            _navigationService.NavigateTo(new AddStudySeriesView(PatientID, _navigationService));

        }



        public event PropertyChangedEventHandler? PropertyChanged;
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
